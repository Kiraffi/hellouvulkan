#version 450 core

#define MATRIX_ORDER row_major
//#define MATRIX_ORDER column_major

layout (binding = 0, MATRIX_ORDER) uniform ConstantDataStructBlock
{
    mat4 cameraMatrix;
    mat4 viewProjMat;
    mat4 mvp;
    mat4 sunMatrix;

    vec2 windowSize;
    vec2 pad1;

    vec4 camPos;
    vec4 pad3;
    vec4 pad4;

    mat4 inverseMvp;
};

layout (binding = 1, MATRIX_ORDER) uniform LightBuffer
{
    vec3 sunDir;
    float lightBufferPadding[16 - 3];
};

//layout (rgba16_snorm, binding = 16) uniform readonly image2D normalTex;
//layout (rgba8, binding = 17) uniform readonly image2D albedoTex;

layout (binding = 16) uniform sampler2D normalTex;
layout (binding = 17) uniform sampler2D albedoTex;
layout (binding = 18)  uniform sampler2D depthTex;

layout (binding = 19)  uniform sampler2DShadow shadowDepthTex;

layout (rgba16f, binding = 20) uniform writeonly image2D storeTex;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
    uint indexInThreadGroup = 8 * gl_LocalInvocationID.y + gl_LocalInvocationID.x;
    uint groupThreadIndex = gl_WorkGroupID.y * 8 + gl_WorkGroupID.x;

    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    if(pos.x < windowSize.x && pos.y < windowSize.y)
    {
        //vec4 normalSample = imageLoad(normalTex, pos);
        //vec4 albedoSample = imageLoad(albedoTex, pos);

        vec4 normalSample = texelFetch(normalTex, pos, 0);
        vec4 albedoSample = texelFetch(albedoTex, pos, 0);

        float depthSample = texelFetch(depthTex, pos.xy, 0).x;

        // Do math, calculate position from vertex?
        // Normal...

        vec2 sampleDepthPos = (pos.xy + vec2(0.5f)) / vec2(windowSize);
        sampleDepthPos.y = 1.0f - sampleDepthPos.y;
        sampleDepthPos = sampleDepthPos * 2.0f - 1.0f;

        vec4 pixelWorldPos = inverseMvp * vec4(sampleDepthPos, depthSample, 1.0f);
        pixelWorldPos = pixelWorldPos / pixelWorldPos.w;

        vec4 pixelWorldPosInShadowMap = sunMatrix * pixelWorldPos;
        float shadowValue = 0.0f;

        // flip y
        pixelWorldPosInShadowMap.y = -pixelWorldPosInShadowMap.y;
        pixelWorldPosInShadowMap.xy = pixelWorldPosInShadowMap.xy * 0.5f + 0.5f;
        pixelWorldPosInShadowMap.z -= 0.001f;
        float shadowDepth = texture(shadowDepthTex, pixelWorldPosInShadowMap.xyz);

        vec3 colorOut = albedoSample.rgb * 0.5f + 0.5f * max(0.0f, -dot(normalSample.xyz, sunDir)) * shadowDepth;

        imageStore(storeTex, pos, vec4(colorOut, pixelWorldPosInShadowMap.z));
        //imageStore(storeTex, pos, pixelWorldPos);
        //imageStore(storeTex, pos, pixelWorldPosInShadowMap);

    }
}

